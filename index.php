<?php

namespace x {
    function excerpt($excerpt) {
        // `excerpt` data has been set
        if ($excerpt) {
            return $excerpt; // Return the initial value
        }
        $content = $this->content;
        $x = \strpos($content, "\u{000C}") ?: \strpos($content, '&#12;') ?: \stripos($content, '&#xC;');
        // Excerpt marker does not exist, return the page’s `description`
        if (!$content || !$x) {
            // If page’s `description` is empty, create a fake excerpt generated by the page’s `content`
            return $this->description ?? \To::description((string) $content);
        }
        // The regular expression part is used to remove the opening paragraph tag (or any opening tag) that has
        // surrounded the form feed character(s) which are usually generated automatically by some extension(s)
        // such as `markdown` and `p` extension
        $content = \trim(\preg_replace('/\s*<[a-z\d:-]+(?:\s[^>]*)?>\s*$/', "", \substr($content, 0, $x)));
        return "" !== $content ? $content : null;
    }
    \Hook::set('page.excerpt', __NAMESPACE__ . "\\excerpt", 2.1);
}

namespace x\excerpt {
    function anchor($content) {
        if (!$content) {
            return $content;
        }
        $x = \strpos($content, "\u{000C}") ?: \strpos($content, '&#12;') ?: \stripos($content, '&#xC;');
        if (!$x) {
            return $content;
        }
        $excerpt = \trim(\preg_replace('/\s*<[a-z\d:-]+(?:\s[^>]*)?>\s*$/', "", \substr($content, 0, $x)));
        $any = \trim(\preg_replace('/^\s*(\x{000C}|&#(12|x[cC]);)\s*<\/[a-z\d:-]+>/i', "", \substr($content, $x)));
        // <https://www.w3.org/TR/dpub-aria-1.0#doc-pagebreak>
        return $excerpt . '<span id="next:' . $this->id . '" role="doc-pagebreak"></span>' . $any;
    }
    \Hook::set('page.content', __NAMESPACE__ . "\\anchor", 2.1);
}